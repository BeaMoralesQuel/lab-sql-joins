-- LAB | SQL Joins

-- In this lab, you will be working with the Sakila database on movie rentals. Specifically, you will be practicing how to perform joins on multiple tables in SQL. Joining multiple tables is a fundamental concept in SQL, allowing you to combine data from different tables to answer complex queries. Furthermore, you will also practice how to use aggregate functions to calculate summary statistics on your joined data.
-- Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;
-- 1. List the number of films per category.

SELECT category.name, SUM(film.film_id) AS number_films
FROM category
JOIN film_category
ON category.category_id = film_category.category_id
JOIN film
ON film_category.film_id = film.film_id
GROUP BY category.name;

-- 2. Retrieve the store ID, city, and country for each store.


SELECT store_id, city.city, country.country
FROM staff
JOIN address
ON staff.address_id = address.address_id
JOIN city
ON address.city_id = city.city_id
JOIN country
ON city.country_id = country.country_id
;

-- 3. Calculate the total revenue generated by each store in dollars.

SELECT staff.store_id, sum(payment.amount) AS revenue_in_dolars
FROM staff
JOIN payment
ON staff.staff_id = payment.staff_id
GROUP BY staff.store_id
;

-- 4. Determine the average running time of films for each category.

SELECT category.name, AVG(film.length)
FROM film
JOIN film_category
ON film.film_id = film_category.film_id
JOIN category
ON film_category.category_id = category.category_id
GROUP BY category.name
;

-- 5. Identify the film categories with the longest average running time.

SELECT category.name AS category, AVG(film.length) AS top_3_mean_running
FROM film
JOIN film_category
ON film.film_id = film_category.film_id
JOIN category
ON film_category.category_id = category.category_id
GROUP BY category.name
ORDER BY AVG(film.length) DESC
LIMIT 3
;

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT film.title, COUNT(rental_id) AS num_rents
FROM rental
JOIN inventory
USING (inventory_id)
JOIN film
USING (film_id)
GROUP BY film.title
ORDER BY num_rents DESC
LIMIT 10;


-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT film.title, inventory.store_id, inventory.inventory_id
FROM film 
JOIN inventory
USING (film_id)
WHERE film.title = 'Academy Dinosaur' AND inventory.store_id = 1;
-- Yes, there are four copies of Academy Dinosaur in Store 1.

-- 8. List of ALL film titles and if they are available in inventory.

SELECT film.title AS Title, COUNT(inventory.film_id),
	CASE
	WHEN inventory.film_id IS NOT NULL THEN 'Available'
	ELSE 'Not Available'
	END AS Availability
FROM film
LEFT JOIN inventory
USING (film_id)
GROUP BY film.film_id;
-- una vez hecho el join habran nulls, y hay que ponerlos como not available